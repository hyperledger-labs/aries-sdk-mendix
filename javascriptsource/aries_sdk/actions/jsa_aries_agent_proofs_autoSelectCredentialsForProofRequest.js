// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * autoSelectCredentialsForProofRequest(options: AutoSelectCredentialsForProofRequestOptions): Promise<FormatRequestedCredentialReturn<[AriesCore.IndyProofFormat]>>
 *     at core/build/modules/proofs/ProofsApi.d.ts
 * 
 * 
 * agent.proofs.autoSelectCredentialsForProofRequest
 * vs
 * agent.proofs.selectCredentialsForRequest
 *     this does not seem to be present, but is indicated at https://github.com/hyperledger/aries-framework-javascript/blob/11366e540421517ce21e8cca8781741fc482be8e/demo/src/Alice.ts#LL60C58-L60C85
 * 
 * 
 * AutoSelectCredentialsForProofRequestOptions
 *     core/build/modules/proofs/models/ModuleOptions.d.ts
 * export interface AutoSelectCredentialsForProofRequestOptions {
 *     proofRecordId: string;
 *     config?: GetRequestedCredentialsConfig;
 * }
 * @param {string} agent_key
 * @param {string} proofFormats - json
 * @param {string} proofRecordId - mandatory
 * @param {string} config - json, optional
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_proofs_autoSelectCredentialsForProofRequest(agent_key, proofFormats, proofRecordId, config) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)/*mandatory*/return Promise.reject("Invalid agent_key parameter");
		if(proofRecordId==null)/*mandatory*/return Promise.reject("Invalid proofRecordId parameter");
		if(config==null)/*optional*/;
		if(config!=null){
			try{
				config=JSON.parse(config);
			}catch(e){
				return Promise.reject("Argument config is not a valid JSON object");
			}
		}
		//if(proofFormats==null)/*mandatory*/return Promise.reject("Invalid proofFormats parameter");
		//try{
		//	proofFormats=JSON.parse(proofFormats);
		//}catch(e){
		//	return Promise.reject("Argument proofFormats is not a valid JSON object");
		//}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let options={};
		if(proofRecordId!=null)options.proofRecordId=proofRecordId;
		if(config!=null)options.config=config;
		//if(proofFormats!=null)options.proofFormats=proofFormats;
		console.info(JSON.stringify(options));
		return Promise.resolve(JSON.stringify(await agent.proofs.autoSelectCredentialsForProofRequest(options)));
	}catch(e){
		return Promise.reject(e);
	}
	// END USER CODE
}
