// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import{AutoAcceptProof}from'@aries-framework/core'
import support from"../support/entidad";
// END EXTRA CODE

/**
 * negotiateRequest(options: AriesCore.NegotiateRequestOptions<[AriesCore.IndyProofFormat]>): Promise<AriesCore.ProofExchangeRecord>
 * 
 * core/build/modules/proofs/models/ModuleOptions.d.ts
 * 
 * export interface NegotiateRequestOptions {
 *     proofRecordId: string;
 *     proofFormats: ProposeProofFormats;
 *     comment?: string;
 *     autoAcceptProof?: AutoAcceptProof;
 * }
 * 
 * export declare enum AutoAcceptProof {
 *     Always = "always",
 *     ContentApproved = "contentApproved",
 *     Never = "never"
 * }
 * @param {string} agent_key
 * @param {string} proofRecordId - mandatory
 * @param {string} proofFormats - json, mandatory
 * @param {string} comment - optional
 * @param {"Aries_SDK.enum_aries_AutoAcceptProof.Never"|"Aries_SDK.enum_aries_AutoAcceptProof.ContentApproved"|"Aries_SDK.enum_aries_AutoAcceptProof.Always"} autoAcceptProof - optional, default never?
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_proofs_negotiateRequest(agent_key, proofRecordId, proofFormats, comment, autoAcceptProof) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)/*mandatory*/return Promise.reject("Invalid agent_key parameter");
		if(proofRecordId==null)/*mandatory*/return Promise.reject("Invalid proofRecordId parameter");
		if(proofFormats==null)/*mandatory*/return Promise.reject("Invalid proofFormats parameter");
		try{
			proofFormats=JSON.parse(proofFormats);
		}catch(e){
			return Promise.reject("argument proofFormats is not a valid JSON object");
		}
		if(comment==null)/*optional*/;
		if(autoAcceptProof==null)autoAcceptProof="Never";																						// default
		switch(autoAcceptProof){																												// -
			case"Never":																														// -
				autoAcceptProof=AutoAcceptProof.Never;																							// -
				break;																															// -
			case"ContentApproved":																												// -
				autoAcceptProof=AutoAcceptProof.ContentApproved;																				// -
				break;																															// -
			case"Always":																														// -
				autoAcceptProof=AutoAcceptProof.Always;																						// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid autoAcceptProof parameter");																	// -
				break;																															// -
		}		
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let options={};
		if(proofRecordId!=null)options.proofRecordId=proofRecordId;
		if(proofFormats!=null)options.proofFormats=proofFormats;
		if(comment!=null)options.comment=comment;
		if(autoAcceptProof!=null)options.autoAcceptProof=autoAcceptProof;
		console.info(JSON.stringify(options));
		return Promise.resolve(JSON.stringify(await agent.proofs.negotiateRequest(options)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
