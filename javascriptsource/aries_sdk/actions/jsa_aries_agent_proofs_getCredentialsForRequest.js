// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * getRequestedCredentialsForProofRequest(options: AutoSelectCredentialsForProofRequestOptions): Promise<FormatRetrievedCredentialOptions<[AriesCore.IndyProofFormat]>>
 * 
 * export interface AutoSelectCredentialsForProofRequestOptions {
 *     proofRecordId: string;
 *     config?: GetRequestedCredentialsConfig;
 * }
 * 
 * export interface GetRequestedCredentialsConfig {
 *     filterByPresentationPreview?: boolean;
 *     filterByNonRevocationRequirements?: boolean;
 * }
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/11366e540421517ce21e8cca8781741fc482be8e/CHANGELOG.md?plain=1#L508
 * - The `ProofsModule.getRequestedCredentialsForProofRequest` expected some low level message objects as input. This is not in line with the public API of the rest of the framework and has been simplified to only require a proof record id and optionally a boolean whether the retrieved credentials should be filtered based on the proof proposal (if available).
 * 
 * e.g. agent.proofs.getRequestedCredentialsForProofRequest({proofRequestId:"1234"})
 * 
 * Responds with the following
 * 
 * {
  "proofFormats": {
    "indy": {
      "requestedAttributes": {},
      "requestedPredicates": {
        "student_card": [
          {
            "credentialId": "1395b65c-1138-469d-a236-9a76b6a362c2",
            "credentialInfo": {
              "referent": "1395b65c-1138-469d-a236-9a76b6a362c2",
              "attrs": {
                "student_last_name": "Smith",
                "expiry_date": "20270522",
                "student_first_name": "Alice"
              },
              "schema_id": "XUxBrVSALWHLeycAUhrNr9:2:student_card:1.0",
              "cred_def_id": "XUxBrVSALWHLeycAUhrNr9:3:CL:26293:student_card",
              "rev_reg_id": null,
              "cred_rev_id": null
            }
          }
        ]
      }
    }
  }
}

 * @param {string} agent_key
 * @param {string} proofRecordId
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_proofs_getCredentialsForRequest(agent_key, proofRecordId) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)/*mandatory*/return Promise.reject("Invalid agent_key parameter");
		if(proofRecordId==null)/*mandatory*/return Promise.reject("Invalid proofRecordId parameter");;
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
    let options={};
    if(proofRecordId!=null)options.proofRecordId=proofRecordId;
    let ret=await agent.proofs.getCredentialsForRequest(options);
		return Promise.resolve(JSON.stringify(ret));
    		
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
