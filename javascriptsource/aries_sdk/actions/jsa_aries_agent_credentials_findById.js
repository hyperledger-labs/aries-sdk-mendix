// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * https://github.com/hyperledger/aries-framework-javascript/blob/dbfebb4720da731dbe11efdccdd061d1da3d1323/packages/core/src/modules/credentials/CredentialsApi.ts
 * 
 *    * Find a credential record by id
 *    *
 *    * @param credentialRecordId the credential record id
 *    * @returns The credential record or null if not found
 *   public findById(credentialRecordId: string): Promise<CredentialExchangeRecord | null> {
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/dbfebb4720da731dbe11efdccdd061d1da3d1323/packages/core/src/modules/credentials/repository/CredentialExchangeRecord.ts
 * 
 * 
 * export interface CredentialExchangeRecordProps {
 *   id?: string
 *   createdAt?: Date
 *   state: CredentialState
 *   connectionId?: string
 *   threadId: string
 *   protocolVersion: string
 * 
 *   tags?: CustomCredentialTags
 *   credentialAttributes?: CredentialPreviewAttribute[]
 *   autoAcceptCredential?: AutoAcceptCredential
 *   linkedAttachments?: Attachment[]
 *   revocationNotification?: RevocationNotification
 *   errorMessage?: string
 *   credentials?: CredentialRecordBinding[]
 * }
 * 
 * export type CustomCredentialTags = TagsBase
 * export type DefaultCredentialTags = {
 *   threadId: string
 *   connectionId?: string
 *   state: CredentialState
 *   credentialIds: string[]
 * }
 * 
 * export interface CredentialRecordBinding {
 *   credentialRecordType: string
 *   credentialRecordId: string
 * }
 * 
 * export class CredentialExchangeRecord extends BaseRecord<DefaultCredentialTags, CustomCredentialTags> {
 *   public connectionId?: string
 *   public threadId!: string
 *   public state!: CredentialState
 *   public autoAcceptCredential?: AutoAcceptCredential
 *   public revocationNotification?: RevocationNotification
 *   public errorMessage?: string
 *   public protocolVersion!: string
 *   public credentials: CredentialRecordBinding[] = []
 * @param {string} agent_key
 * @param {string} credentialRecordId
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_credentials_findById(agent_key, credentialRecordId) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(credentialRecordId==null)return Promise.reject("Invalid credentialRecordId parameter");										//mandatory
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		return Promise.resolve(JSON.stringify(await agent.credentials.findById(credentialRecordId)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
