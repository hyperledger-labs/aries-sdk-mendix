// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * https://github.com/hyperledger/aries-framework-javascript/blob/f27fb9921e11e5bcd654611d97d9fa1c446bc2d5/packages/core/src/modules/basic-messages/BasicMessagesApi.ts
 * 
 * findAllByQuery(query: Query<BasicMessageRecord>): Promise<BasicMessageRecord[]>
 * The query
 * 
 * 
 * Retrieve all basic messages matching a given query
 * 
 * @returns â€” array containing all matching records
 * 
 * An example value for Query<BasicMessageRecord> is given at https://github.com/hyperledger/aries-framework-javascript/blob/f27fb9921e11e5bcd654611d97d9fa1c446bc2d5/packages/core/src/modules/basic-messages/__tests__/basic-messages.e2e.test.ts
 * 
 *     const aliceReplyMessages = await aliceAgent.basicMessages.findAllByQuery({ parentThreadId: helloMessage.id })
 * 
 * sample response value
 * 
 * [{"_tags":{"connectionId":"b86b3b09-1feb-44c0-88c6-9339929e1667","role":"sender"},"metadata":{},"id":"ae4a8060-3ae1-4336-ac39-e5db228d8319","createdAt":"2023-04-08T14:39:01.652Z","content":"test","sentTime":"2023-04-08T14:39:01.651Z","connectionId":"b86b3b09-1feb-44c0-88c6-9339929e1667","role":"sender"},{"_tags":{"connectionId":"8f893b3f-8c4e-42a4-8d36-fc17eb52677b","role":"sender"},"metadata":{},"id":"6a3cc08d-ff6b-4dba-9102-8716f4ce77e5","createdAt":"2023-04-08T13:52:58.664Z","content":"test","sentTime":"2023-04-08T13:52:58.661Z","connectionId":"8f893b3f-8c4e-42a4-8d36-fc17eb52677b","role":"sender"}]
 * 
 * 
 * @param {string} agent_key
 * @param {string} query
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_basicMessages_findAllByQuery(agent_key, query) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(query==null)return Promise.reject("Invalid query parameter");										//mandatory
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let basicMessageRecords=await agent.basicMessages.findAllByQuery(JSON.parse(query));
		return Promise.resolve(JSON.stringify(basicMessageRecords));

	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
