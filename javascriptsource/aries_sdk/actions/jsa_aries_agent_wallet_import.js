// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
import{KeyDerivationMethod}from'@aries-framework/core';
// END EXTRA CODE

/**
 * https://github.com/hyperledger/aries-framework-javascript/blob/21d4bf7652e30062e82f440f0c70470cc6f31f53/packages/core/src/wallet/WalletApi.ts
 * https://github.com/hyperledger/aries-framework-javascript/blob/21d4bf7652e30062e82f440f0c70470cc6f31f53/packages/core/src/types.ts
 * 
 * public async import(walletConfig: WalletConfig, importConfig: WalletExportImportConfig): Promise<void>
 * 
 * export interface WalletConfig {
 *   id: string
 *   key: string
 *   keyDerivationMethod?: KeyDerivationMethod
 *   storage?: WalletStorageConfig
 * }
 * 
 * export interface WalletExportImportConfig {
 *   key: string
 *   path: string
 * }
 * 
 * export interface WalletStorageConfig {
 *   type: string
 *   [key: string]: unknown
 * }
 * @param {string} agent_key - mandatory
 * @param {string} id_ - mandatory
 * @param {string} key - mandatory
 * @param {"Aries_SDK.enum_aries_KeyDerivationMethod.Argon2IMod"|"Aries_SDK.enum_aries_KeyDerivationMethod.Argon2Int"|"Aries_SDK.enum_aries_KeyDerivationMethod.Raw"} keyDerivationMethod - optional
 * @param {string} storage_type - optional
 * @param {string} path - mandatory
 * @returns {Promise.<void>}
 */
export async function jsa_aries_agent_wallet_import(agent_key, id_, key, keyDerivationMethod, storage_type, path) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");							//mandatory
		if(id_==null)return Promise.reject("Invalid id_ parameter");										//mandatory
		if(key==null)return Promise.reject("Invalid key parameter");										//mandatory
		if(keyDerivationMethod==null);																		//optional
		if(storage_type==null);																					//optional
		if(path==null)return Promise.reject("Invalid path parameter");										//mandatory
		if(key==null)return Promise.reject("Invalid key parameter");										//mandatory
		if(path==null)return Promise.reject("Invalid path parameter");										//mandatory
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let walletConfig={};
		if(id_!=null)walletConfig.id=id_;
		if(key!=null)walletConfig.key=key;
		//if(keyDerivationMethod!=null)walletConfig.keyDerivationMethod=keyDerivationMethod;
		switch(keyDerivationMethod){
			case"Argon2IMod":walletConfig.keyDerivationMethod=KeyDerivationMethod.Argon2IMod;break;
			case"Argon2IInt":walletConfig.keyDerivationMethod=KeyDerivationMethod.Argon2IInt;break;
			case"Raw":walletConfig.keyDerivationMethod=KeyDerivationMethod.Raw;break;
			default:break;
		}
		if(storage_type!=null)walletConfig.storage={type:storage_type};
		let walletExportImportConfig={};
		if(key!=null)walletExportImportConfig.key=key;
		if(path!=null)walletExportImportConfig.path=path;
		await agent.wallet.import(walletConfig,walletExportImportConfig);
		return Promise.resolve();
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
