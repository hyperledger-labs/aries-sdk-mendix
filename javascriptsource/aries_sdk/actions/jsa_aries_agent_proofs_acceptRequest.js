// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * acceptRequest(options: AriesCore.AcceptProofPresentationOptions<[AriesCore.IndyProofFormat]>): Promise<AriesCore.ProofExchangeRecord>
 * 
 * agent.proofs.acceptRequest({proofRecordId,proofFormats,comment})
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/700d3f89728ce9d35e22519e505d8203a4c9031e/packages/core/src/modules/proofs/repository/ProofExchangeRecord.ts#L9
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/700d3f89728ce9d35e22519e505d8203a4c9031e/demo/src/Alice.ts#L64
 * 
 *     await this.agent.proofs.acceptRequest({
 *       proofRecordId: proofRecord.id,
 *       proofFormats: requestedCredentials.proofFormats,
 *     })
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/700d3f89728ce9d35e22519e505d8203a4c9031e/packages/anoncreds/src/protocols/proofs/v1/__tests__/v1-connectionless-proofs.e2e.test.ts#L139
 * 
 *     await aliceAgent.proofs.acceptRequest({
 *       proofRecordId: aliceProofExchangeRecord.id,
 *       useReturnRoute: returnRoute,
 *       proofFormats: { indy: requestedCredentials.proofFormats.indy },
 *     })
 * 
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/700d3f89728ce9d35e22519e505d8203a4c9031e/packages/core/src/modules/proofs/ProofsApi.ts
 *   public async acceptRequest(options: AcceptProofRequestOptions<PPs>): Promise<ProofExchangeRecord> {
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/700d3f89728ce9d35e22519e505d8203a4c9031e/packages/core/src/modules/proofs/ProofsApiOptions.ts#L95
 * export interface AcceptProofRequestOptions<PPs extends ProofProtocol[] = ProofProtocol[]> extends BaseOptions {
 *   proofRecordId: string
 * 
 *   useReturnRoute?: boolean
 *   proofFormats?: ProofFormatPayload<ProofFormatsFromProtocols<PPs>, 'acceptRequest'>
 * 
 *   goalCode?: string
 * 
 *   willConfirm?: boolean
 * }
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/11366e540421517ce21e8cca8781741fc482be8e/packages/core/src/modules/proofs/ProofsApi.ts#L195
 *     const { message } = await protocol.acceptProposal(this.agentContext, {
 *       proofRecord,
 *       proofFormats: options.proofFormats,
 *       goalCode: options.goalCode,
 *       willConfirm: options.willConfirm,
 *       comment: options.comment,
 *       autoAcceptProof: options.autoAcceptProof,
 *     })
 * @param {string} agent_key
 * @param {string} proofRecordId
 * @param {string} proofFormats - mandatory json
 * @param {string} comments - optional
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_proofs_acceptRequest(agent_key, proofRecordId, proofFormats, comments) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)/*mandatory*/return Promise.reject("Invalid agent_key parameter");
		if(proofRecordId==null)/*optional*/;
		if(proofFormats==null)/*required*/return Promise.reject("Invalid proofFormats parameter");
		try{
			proofFormats=JSON.parse(proofFormats);
		}catch(e){
			return Promise.reject("Argument proofFormats is not a valid JSON object");
		}
		if(comments==null)/*optional*/;
		let options={};
		if(proofRecordId!=null)options.proofRecordId=proofRecordId;
		//17:11 2023/06/30
		//skip for now
		//if(proofFormats!=null)options.proofFormats=proofFormats;
		//17:11 2023/06/30
		//skip for now
		//if(comments!=null)options.comments=comments;
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		console.info(JSON.stringify(options,0,2)); 
		//17:11 2023/06/30
		//do like this
		const requestedCredentials = await agent.proofs.selectCredentialsForRequest({
			proofRecordId: proofRecordId,
		});
		//17:11 2023/06/30
		//do like this
		options.proofFormats=requestedCredentials.proofFormats;
		return Promise.resolve(JSON.stringify(await agent.proofs.acceptRequest(options)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
