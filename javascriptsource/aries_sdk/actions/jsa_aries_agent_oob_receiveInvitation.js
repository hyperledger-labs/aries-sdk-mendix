// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * receiveInvitation(invitation: AriesCore.OutOfBandInvitation | AriesCore.ConnectionInvitationMessage, config?: AriesCore.ReceiveOutOfBandInvitationConfig): Promise<{ outOfBandRecord: AriesCore.OutOfBandRecord; connectionRecord?: AriesCore.ConnectionRecord; }>
 * either OutOfBandInvitation or ConnectionInvitationMessage
 * 
 * 
 * Creates inbound out-of-band record and assigns out-of-band invitation message to it if the message is valid. It automatically passes out-of-band invitation for further processing to acceptInvitation method. If you don't want to do that you can set autoAcceptInvitation attribute in config parameter to false and accept the message later by calling acceptInvitation.
 * 
 * It supports both OOB (Aries RFC 0434: Out-of-Band Protocol 1.1) and Connection Invitation (0160: Connection Protocol).
 * 
 * Agent role: receiver (invitee)
 * 
 * @returns â€” out-of-band record and connection record if one has been created.
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/66afda2fe7311977047928e0b1c857ed2c5602c7/packages/core/tests/oob.test.ts
 * 
 * example use:
 * 
 * 
 *       const { outOfBandRecord: receivedOutOfBandRecord, connectionRecord } = await aliceAgent.oob.receiveInvitation(
 *         outOfBandInvitation,
 *         {
 *           autoAcceptInvitation: false,
 *           autoAcceptConnection: false,
 *         }
 *       )
 * @param {string} agent_key
 * @param {string} invitation - json?
 * @param {string} config - optional json?
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_oob_receiveInvitation(agent_key, invitation, config) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");		//mandatory
		if(invitation==null)return Promise.reject("Invalid invitation parameter");		//mandatory
		if(config==null);																//optional
		if(config!=null){
			try{
				config=JSON.parse(config);
			}catch(e){
				return Promise.reject("Argument config is not a valid JSON object");
			}
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let ret=null;
		if(config==null){
			ret=await agent.oob.receiveInvitation(invitation);
		}else if(config!=null){
			ret=await agent.oob.receiveInvitation(invitation,config);
		}
		return Promise.resolve(JSON.stringify(ret));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
