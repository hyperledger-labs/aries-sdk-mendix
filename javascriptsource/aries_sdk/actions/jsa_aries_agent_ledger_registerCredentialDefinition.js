// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * registerCredentialDefinition(credentialDefinitionTemplate: Omit<AriesCore.CredentialDefinitionTemplate, "signatureType">): Promise<CredDef>
 * 
 * https://aries.js.org/guides/tutorials/issue-a-credential#2-registering-the-schema-and-credential-definition
 * 
 * const registerSchema = async (issuer: Agent) =>
 *   issuer.ledger.registerSchema({ attributes: ['name', 'age'], name: 'Identity', version: '1.0' })
 * const registerCredentialDefinition = async (issuer: Agent, schema: Schema) =>
 *   issuer.ledger.registerCredentialDefinition({ schema, supportRevocation: false, tag: 'default' })
 * 
 * Examples:
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/de90cafb8d12b7a940f881184cd745c4b5043cbc/packages/anoncreds/tests/legacyAnonCredsSetup.ts
 * 
 *   const credentialDefinition = await registerCredentialDefinition(agent, {
 *     schemaId: schema.schemaId,
 *     issuerId: didIndyDid,
 *     tag: 'default',
 *   })
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/de90cafb8d12b7a940f881184cd745c4b5043cbc/packages/anoncreds-rs/src/services/__tests__/AnonCredsRsServices.test.ts
 * 
 *     const { credentialDefinition, credentialDefinitionPrivate, keyCorrectnessProof } =
 *       await anonCredsIssuerService.createCredentialDefinition(agentContext, {
 *         issuerId,
 *         schemaId: schemaState.schemaId as string,
 *         schema,
 *         tag: 'Employee Credential',
 *         supportRevocation: false,
 *       })
 * 
 *     const { credentialDefinitionState } = await registry.registerCredentialDefinition(agentContext, {
 *       credentialDefinition,
 *       options: {},
 *     })
 * 
 * References:
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/47636b4a08ffbfa9a3f2a5a3c5aebda44f7d16c8/packages/anoncreds/src/AnonCredsApi.ts
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/47636b4a08ffbfa9a3f2a5a3c5aebda44f7d16c8/packages/anoncreds/src/services/registry/AnonCredsRegistry.ts
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/47636b4a08ffbfa9a3f2a5a3c5aebda44f7d16c8/packages/anoncreds/src/services/registry/CredentialDefinitionOptions.ts
 * 
 * @param {string} agent_key
 * @param {string} schema - json?
 * @param {boolean} supportRevocation
 * @param {string} tag
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_ledger_registerCredentialDefinition(agent_key, schema, supportRevocation, tag) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");							//mandatory
		if(schema==null)return Promise.reject("Invalid schema parameter");									//mandatory
		try{
			schema=JSON.parse(schema);
		}catch(e){
			return Promise.reject("Argument schema is not a valid JSON object")
		}
		if(supportRevocation==null)return Promise.reject("Invalid supportRevocation parameter");										//mandatory
		if(tag==null)return Promise.reject("Invalid tag parameter");										//mandatory
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		/*
		console.info("#############");
		console.info("typeof(agent.ledger.getCreatedSchemas):");
		console.info(typeof(agent.ledger.getCreatedSchemas));
		console.info("JSON.stringify(Object.keys(agent.ledger)):");
		console.info(JSON.stringify(Object.keys(agent.ledger)));
		console.info("typeof(agent.ledger.ledgerService):");
		console.info(typeof(agent.ledger.ledgerService));
		console.info("JSON.stringify(Object.keys(agent.ledger.ledgerService)):");
		console.info(JSON.stringify(Object.keys(agent.ledger.ledgerService)));
		//["indy","logger","indyIssuer","indyPoolService"]		
		console.info("typeof(agent.ledger.ledgerService.indy):");
		console.info(typeof(agent.ledger.ledgerService.indy));
		console.info("JSON.stringify(Object.keys(agent.ledger.ledgerService.indy)):");
		console.info(JSON.stringify(Object.keys(agent.ledger.ledgerService.indy)));
		//["createWallet","openWallet","closeWallet","deleteWallet","exportWallet","importWallet","createAndStoreMyDid","keyForDid","keyForLocalDid","storeTheirDid","listMyDidsWithMeta","setDidMetadata","createPairwise","getPairwise","createKey","cryptoAnonCrypt","cryptoAnonDecrypt","cryptoAuthCrypt","cryptoAuthDecrypt","cryptoSign","cryptoVerify","packMessage","unpackMessage","createPoolLedgerConfig","openPoolLedger","setProtocolVersion","closePoolLedger","submitRequest","signRequest","buildSchemaRequest","buildGetSchemaRequest","buildGetTxnRequest","buildGetAttribRequest","buildGetNymRequest","parseGetNymResponse","parseGetSchemaResponse","buildCredDefRequest","buildGetCredDefRequest","parseGetCredDefResponse","buildGetRevocRegDefRequest","parseGetRevocRegDefResponse","buildGetRevocRegDeltaRequest","parseGetRevocRegDeltaResponse","buildGetRevocRegRequest","parseGetRevocRegResponse","proverCreateMasterSecret","proverCreateCredentialReq","proverStoreCredential","proverGetCredential","proverDeleteCredential","proverGetCredentials","proverGetCredentialsForProofReq","proverSearchCredentialsForProofReq","proverFetchCredentialsForProofReq","proverCloseCredentialsSearchForProofReq","proverCreateProof","verifierVerifyProof","generateNonce","generateWalletKey","appendTxnAuthorAgreementAcceptanceToRequest","buildGetTxnAuthorAgreementRequest","addWalletRecord","updateWalletRecordValue","updateWalletRecordTags","addWalletRecordTags","deleteWalletRecordTags","deleteWalletRecord","getWalletRecord","openWalletSearch","fetchWalletSearchNextRecords","closeWalletSearch","issuerCreateSchema","issuerCreateAndStoreCredentialDef","issuerCreateCredentialOffer","issuerCreateCredential","createRevocationState","openBlobStorageReader"]
		console.info("typeof(agent.ledger.ledgerService.indyIssuer):");
		console.info(typeof(agent.ledger.ledgerService.indyIssuer));
		console.info("JSON.stringify(Object.keys(agent.ledger.ledgerService.indyIssuer)):");
		console.info(JSON.stringify(Object.keys(agent.ledger.ledgerService.indyIssuer)));
		//["indy","indyUtilitiesService"]
		console.info("typeof(agent.ledger.ledgerService.indyPoolService):");
		console.info(typeof(agent.ledger.ledgerService.indyPoolService));
		console.info("JSON.stringify(Object.keys(agent.ledger.ledgerService.indyPoolService)):");
		console.info(JSON.stringify(Object.keys(agent.ledger.ledgerService.indyPoolService)));
		//["pools","logger","indy","agentDependencies","fileSystem","stop$","didCache"]
		console.info("typeof(agent.ledger.ledgerService.indyIssuer.indyUtilitiesService):");
		console.info(typeof(agent.ledger.ledgerService.indyIssuer.indyUtilitiesService));
		console.info("JSON.stringify(Object.keys(agent.ledger.ledgerService.indyIssuer.indyUtilitiesService)):");
		console.info(JSON.stringify(Object.keys(agent.ledger.ledgerService.indyIssuer.indyUtilitiesService)));
		//["indy","logger","fileSystem"]
		console.info("#############");
		*/
		return Promise.resolve(JSON.stringify(await agent.ledger.registerCredentialDefinition({
			schema:schema,
			supportRevocation:supportRevocation,
			tag:tag
		})));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
