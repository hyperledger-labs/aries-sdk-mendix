// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * query(...queries: AriesCore.FeatureQuery[]): AriesCore.Feature[]
 * set of {FeatureQuery} objects to query features
 * 
 * 
 * Perform a set of queries in the registry, supporting wildcards (*) as expressed in Aries RFC 0557.
 * 
 * @see — https://github.com/hyperledger/aries-rfcs/blob/560ffd23361f16a01e34ccb7dcc908ec28c5ddb1/features/0557-discover-features-v2/README.md
 * 
 * @returns — array containing all matching features (can be empty)
 * @param {string} agent_key
 * @param {string} queries - json?
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_features_query(agent_key, queries) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(queries==null)return Promise.reject("Invalid queries parameter");										//mandatory
		try{
			queries=JSON.parse(queries);
		}catch(e){
			return Promise.reject("Argument queries is not a valid JSON object");
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		return Promise.resolve(JSON.stringify(agent.features.query(queries)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
