// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import{AutoAcceptCredential}from'@aries-framework/core';
import support from"../support/entidad";
// END EXTRA CODE

/**
 * https://github.com/hyperledger/aries-framework-javascript/blob/dbfebb4720da731dbe11efdccdd061d1da3d1323/packages/core/src/modules/credentials/CredentialsApi.ts
 * 
 *    * @param options The object containing config options of the offer to be accepted
 *    * @returns Object containing offer associated credential record
 * 
 * public async acceptOffer(options: AcceptCredentialOfferOptions<CPs>):Promise<CredentialExchangeRecord>
 * 
 * agent.credentials.acceptOffer({credentialRecordId,autoAcceptCredential,comment,credentialFormats})
 * 
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/dbfebb4720da731dbe11efdccdd061d1da3d1323/packages/core/src/modules/credentials/CredentialsApiOptions.ts#L120
 * 
 * Interface for CredentialsApi.acceptOffer. Will send a request
 * credentialFormats is optional because this is an accept method
 * export interface AcceptCredentialOfferOptions<CPs extends CredentialProtocol[] = CredentialProtocol[]>
 *   extends BaseOptions {
 *   credentialRecordId: string
 *   credentialFormats?: CredentialFormatPayload<CredentialFormatsFromProtocols<CPs>, 'acceptOffer'>
 * }
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/dbfebb4720da731dbe11efdccdd061d1da3d1323/packages/core/src/modules/credentials/protocol/CredentialProtocol.ts
 * 
 * 
 * @param {string} agent_key
 * @param {string} credentialRecordId
 * @param {"Aries_SDK.enum_aries_AutoAcceptCredential.Never"|"Aries_SDK.enum_aries_AutoAcceptCredential.ContentApproved"|"Aries_SDK.enum_aries_AutoAcceptCredential.Always"} autoAcceptCredential - optional
 * @param {string} credentialFormats - optional json
 * @param {string} comment - optional
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_credentials_acceptOffer(agent_key, credentialRecordId, autoAcceptCredential, credentialFormats, comment) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)/*mandatory*/return Promise.reject("Invalid agent_key parameter");
		if(credentialRecordId==null)/*mandatory*/return Promise.reject("Invalid credentialRecordId parameter");
		if(autoAcceptCredential==null)/*optional*/;
		//AutoAcceptCredential
		let autoAcceptCredential_=null;
		if(autoAcceptCredential==null)autoAcceptCredential="Never";																			// default
		switch(autoAcceptCredential){																											// -
			case"Never":																														// -
				autoAcceptCredential_=AutoAcceptCredential.Never;																				// -
				break;																															// -
			case"ContentApproved":																												// -
				autoAcceptCredential_=AutoAcceptCredential.ContentApproved;																		// -
				break;																															// -
			case"Always":																														// -
				autoAcceptCredential_=AutoAcceptCredential.Always;																				// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid autoAcceptCredentials parameter");																// -
				break;																															// -
		}																																		// -
		if(credentialFormats==null)/*optional*/;
		if(comment==null)/*optional*/;
		let options={};
		if(credentialRecordId!=null)options.credentialRecordId=credentialRecordId;
		if(autoAcceptCredential_!=null)options.autoAcceptCredential=autoAcceptCredential_;
		if(credentialFormats!=null)options.credentialFormats=credentialFormats;
		if(comment!=null)options.comment=comment;
		//console.warn("OFFER OPTIONS:");
		//console.warn(JSON.stringify(options));
		//{"credentialRecordId":"012916b7-cc00-46b8-88ab-fbb9ded86ad7","autoAcceptCredential":"never"} 
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		return Promise.resolve(JSON.stringify(await agent.credentials.acceptOffer(options)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
