// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * https://github.com/hyperledger/aries-framework-javascript/blob/f27fb9921e11e5bcd654611d97d9fa1c446bc2d5/packages/core/src/modules/basic-messages/BasicMessagesApi.ts
 * 
 * sendMessage(connectionId: string, message: string): Promise<BasicMessageRecord>
 * Connection Id
 * Send a message to an active connection
 * @throws — {RecordNotFoundError} If connection is not found
 * @throws — {MessageSendingError} If message is undeliverable
 * @returns — the created record
 * 
 * An example of sending messages can be found at https://github.com/hyperledger/aries-framework-javascript/blob/b6d66b1e9a75b4070dbfa0499ba972392c8d7b86/demo/src/Alice.ts
 * @param {string} agent_key
 * @param {string} connectionId
 * @param {string} message
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_basicMessages_sendMessage(agent_key, connectionId, message) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(connectionId==null)return Promise.reject("Invalid connectionId parameter");										//mandatory
		if(message==null)return Promise.reject("Invalid message parameter");										//mandatory
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let messageRecord=await agent.basicMessages.sendMessage(connectionId,message);
		return Promise.resolve(JSON.stringify(messageRecord));

	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
