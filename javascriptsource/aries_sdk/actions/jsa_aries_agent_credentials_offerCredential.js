// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * https://aries.js.org/guides/tutorials/issue-a-credential
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/dbfebb4720da731dbe11efdccdd061d1da3d1323/packages/core/src/modules/credentials/CredentialsApi.ts
 * 
 *    * Initiate a new credential exchange as issuer by sending a credential offer message
 *    * to the connection with the specified connection id.
 *    *
 *    * @param options config options for the credential offer
 *    * @returns Credential exchange record associated with the sent credential offer message
 *   public async offerCredential(options: OfferCredentialOptions<CPs>): Promise<CredentialExchangeRecord> {
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/700d3f89728ce9d35e22519e505d8203a4c9031e/demo/src/Faber.ts#L194
 * ...
 *     await this.agent.credentials.offerCredential({
 *       connectionId: connectionRecord.id,
 *       protocolVersion: 'v2',
 *       credentialFormats: {
 *         anoncreds: {
 *           attributes: [
 *             {
 *               name: 'name',
 *               value: 'Alice Smith',
 *             },
 *             {
 *               name: 'degree',
 *               value: 'Computer Science',
 *             },
 *             {
 *               name: 'date',
 *               value: '01/01/2022',
 *             },
 *           ],
 *           credentialDefinitionId: credentialDefinition.credentialDefinitionId,
 *         },
 *       },
 *     })
 * ...
 * @param {string} agent_key
 * @param {string} options - json
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_credentials_offerCredential(agent_key, options) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(options==null)return Promise.reject("Invalid options parameter");										//mandatory
		try{
			options=JSON.parse(options);
		}catch(e){
			return Promise.reject("Argument options is not a valid JSON object");
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		return Promise.resolve(JSON.stringify(await agent.credentials.offerCredential(options)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
