// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
// END EXTRA CODE

/**
 * acceptInvitation(outOfBandId: string, config: { autoAcceptConnection?: boolean; reuseConnection?: boolean; label?: string; alias?: string; imageUrl?: string; routing?: AriesCore.Routing; timeoutMs?: number; }): Promise<{ outOfBandRecord: AriesCore.OutOfBandRecord; connectionRecord: AriesCore.ConnectionRecord; } | { outOfBandRecord: AriesCore.OutOfBandRecord; connectionRecord?: undefined; }>
 * 
 * Creates a connection if the out-of-band invitation message contains handshake_protocols attribute, except for the case when connection already exists and reuseConnection is enabled.
 * @param {string} agent_key
 * @param {string} outOfBandId
 * @param {boolean} config_autoAcceptConnection - optional
 * @param {boolean} config_reuseConnection - optional
 * @param {string} config_label - optional
 * @param {string} config_alias - optional
 * @param {string} config_imageUrl - optional
 * @param {string} config_routing - optional json?
 * @param {Big} config_timeoutMs - optional
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_oob_acceptInvitation(agent_key, outOfBandId, config_autoAcceptConnection, config_reuseConnection, config_label, config_alias, config_imageUrl, config_routing, config_timeoutMs) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");		//mandatory
		if(outOfBandId==null)return Promise.reject("Invalid outOfBandId parameter");	//mandatory
		if(config_routing!=null){
			try{
				config_routing=JSON.parse(config_routing);
			}catch(e){
				return Promise.reject("Argument config_routing is not a valid JSON object");
			}
		}
		let config={};
		if(config_autoAcceptConnection!=null)config.autoAcceptConnection=config_autoAcceptConnection;//boolean
		if(config_reuseConnection!=null)config.reuseConnection=config_reuseConnection;//boolean
		if(config_label!=null)config.label=config_label;//string
		if(config_alias!=null)config.alias=config_alias;//string
		if(config_imageUrl!=null)config.imageUrl=config_imageUrl;//string
		if(config_routing!=null)config.routing=config_routing;//AriesCore.Routing
		if(config_timeoutMs!=null)config.timeoutMs=config_timeoutMs.toNumber();//number; 		
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		return Promise.resolve(JSON.stringify(await agent.oob.acceptInvitation(outOfBandId,config)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
