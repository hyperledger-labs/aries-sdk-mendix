// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import{MediatorPickupStrategy}from'@aries-framework/core'
import support from"../support/entidad";
// END EXTRA CODE

/**
 * initiateMessagePickup(mediator?: AriesCore.MediationRecord, pickupStrategy?: AriesCore.MediatorPickupStrategy): Promise<Subscription>
 * optional {MediationRecord} corresponding to the mediator to pick messages from. It will use default mediator otherwise
 * 
 * 
 * Start a Message Pickup flow with a registered Mediator.
 * 
 * @returns
 * @param {string} agent_key
 * @param {string} mediator - json?
 * @param {"Aries_SDK.enum_aries_MediatorPickupStrategy.PickUpV1"|"Aries_SDK.enum_aries_MediatorPickupStrategy.PickUpV2"|"Aries_SDK.enum_aries_MediatorPickupStrategy.Implicit"} pickupStrategy
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_mediationRecipient_initiateMessagePickup(agent_key, mediator, pickupStrategy) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");	//mandatory
		if(mediator==null);															//optional
		if(mediator!=null){
			try{
				mediator=JSON.parse(mediator);
			}catch(e){
				return Promise.reject("Argument mediator is not a valid JSON object");
			}
		}
		if(pickupStrategy==null);													//optional
		switch(pickupStrategy){																											// -
			case"PickUpV1":																														// -
				pickupStrategy=MediatorPickupStrategy.PickUpV1;																			// -
				break;																															// -
			case"PickUpV2":																														// -
				pickupStrategy=MediatorPickupStrategy.PickUpV2;																			// -
				break;																															// -
			case"Implicit":																														// -
				pickupStrategy=MediatorPickupStrategy.Implicit;																			// -
				break;																															// -
			default:																															// -
				//return Promise.reject("Invalid mediatorPickupStrategy parameter");																// -
				break;																															// -
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		//todo:apply named arguments properly
		let ret=null;
		      if(mediator==null&&pickupStrategy==null){
				  ret=await agent.mediationRecipient.initiateMessagePickup(mediator,pickupStrategy)
		}else if(mediator==null&&pickupStrategy!=null){
				  ret=await agent.mediationRecipient.initiateMessagePickup(mediator,pickupStrategy)
		}else if(mediator!=null&&pickupStrategy==null){
				  ret=await agent.mediationRecipient.initiateMessagePickup(mediator,pickupStrategy)
		}else if(mediator!=null&&pickupStrategy!=null){
				  ret=await agent.mediationRecipient.initiateMessagePickup(mediator,pickupStrategy)
		}
		return Promise.resolve(JSON.stringify(ret));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
