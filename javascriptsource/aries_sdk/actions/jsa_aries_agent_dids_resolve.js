// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * resolve(didUrl: string, options?: DIDResolutionOptions): Promise<AriesCore.DidResolutionResult>
 * Resolve a did to a did document.
 * 
 * Follows the interface as defined in https://w3c-ccg.github.io/did-resolution/
 * 
 * https://github.com/hyperledger/aries-framework-javascript/blob/main/packages/core/src/modules/dids/DidsApi.ts
 * @param {string} agent_key
 * @param {string} didUrl
 * @param {string} options - json optional
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_dids_resolve(agent_key, didUrl, options) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(didUrl==null)return Promise.reject("Invalid didUrl parameter");										//mandatory
		if(options!=null){
			try{
				options=JSON.parse(options);
			}catch(e){
				return Promise.reject("Argument options is not a valid JSON object");
			}
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		if(options==null){
			return Promise.resolve(JSON.stringify(await agent.dids.resolve(didUrl)));
		}else{
			return Promise.resolve(JSON.stringify(await agent.dids.resolve(didUrl,options)));
		}
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
