// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from "../support/entidad";
import {PeerDidNumAlgo,KeyType} /*{PeerDidNumAlgo}*/from"@aries-framework/core";
//import{Agent}from"@aries-framework/core"
// END EXTRA CODE

/**
 * export interface KeyDidCreateOptions extends DidCreateOptions {
 *   method: 'key'
 *   // For now we don't support creating a did:key with a did or did document
 *   did?: never
 *   didDocument?: never
 *   options: {
 *     keyType: KeyType
 *   }
 *   secret?: {
 *     seed?: Buffer
 *     privateKey?: Buffer
 *   }
 * }
 * 
 * export interface DidCreateOptions {
 *   method?: string
 *   did?: string
 *   options?: DidRegistrationExtraOptions
 *   secret?: DidRegistrationSecretOptions
 *   didDocument?: DidDocument
 * }
 * @param {string} agent_key - mandatory
 * @param {"Aries_SDK.enum_aries_DidMethod.peer"|"Aries_SDK.enum_aries_DidMethod.key"|"Aries_SDK.enum_aries_DidMethod.sov"|"Aries_SDK.enum_aries_DidMethod.web"} method - optional
 * @param {string} did - optional
 * @param {"Aries_SDK.enum_aries_KeyType.Bls12381g1"|"Aries_SDK.enum_aries_KeyType.Bls12381g1g2"|"Aries_SDK.enum_aries_KeyType.Bls12381g2"|"Aries_SDK.enum_aries_KeyType.Ed25519"|"Aries_SDK.enum_aries_KeyType.X25519"} options_keyType - mandatory
 * @param {string} secret - optional
 * @param {string} didDocument - optional
 * @returns {Promise.<string>}
 */
export async function jsa_aries_agent_dids_create(agent_key, method, did, options_keyType, secret, didDocument) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");										//mandatory
		if(options_keyType==null)return Promise.reject("Invalid options_keyType parameter");							//mandatory
		if(method==null)/*optional*/;
		if(did==null)/*optional*/;
		if(secret==null)/*optional*/;
		if(didDocument==null)/*optional*/;
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		//----------------------------------------------------------------------------------------------------
		//beg - set up configuration parameter
		//----------------------------------------------------------------------------------------------------
		let config={};
		if(method!=null)config.method=method;
		if(did!=null)config.did=did;
		config.options={};
		switch(options_keyType){		
			case"Bls12381g1":config.options.keyType=KeyType.Bls12381g1;break;
			case"Bls12381g1g2":config.options.keyType=KeyType.Bls12381g1g2;break;		
			case"Bls12381g2":config.options.keyType=KeyType.Bls12381g2;break;
			case"Ed25519":config.options.keyType=KeyType.Ed25519;break;
			case"X25519":config.options.keyType=KeyType.X25519;break;
			default:
				return Promise.reject("Invalid options_keyType value");
		}
		if(secret!=null)config.secret=secret;
		if(didDocument!=null)config.didDocument=didDocument;
		//----------------------------------------------------------------------------------------------------
		//end - set up configuration parameter
		//----------------------------------------------------------------------------------------------------
		let did=await agent.dids.create(config);
		if(did.didState.state=="failed")return Promise.reject(did.didState.reason);
		//verkey note:
		//https://github.com/hyperledger/aries-framework-javascript/blob/c99f3c9152a79ca6a0a24fdc93e7f3bebbb9d084/packages/core/src/modules/oob/helpers.ts
		//https://github.com/hyperledger/aries-framework-javascript/blob/c99f3c9152a79ca6a0a24fdc93e7f3bebbb9d084/packages/core/src/modules/dids/helpers.ts
		//take note of function expecting starts with did:key and not did:peer
		//import { didKeyToVerkey, verkeyToDidKey } from '../dids/helpers' 
		return Promise.resolve(JSON.stringify(did));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
